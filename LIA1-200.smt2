(set-logic HORN)

(declare-datatypes () ((Registers (mk-state (x Int) ))))

; Alive
(define-fun C0 ((reg Registers) (regN Registers)) Bool true)

; P
(define-fun C1 ((reg Registers) (regN Registers)) Bool (= (x reg) 0) )

; Q
(define-fun C2 ((reg Registers) (regN Registers)) Bool
   (= (x regN) (+ (x reg) 1))
)

; R
(define-fun C3 ((reg Registers) (regN Registers)) Bool (= (x reg) 200) )

; FR
(define-fun C4 ((reg Registers) (regN Registers)) Bool true)


(declare-fun Q0 (Registers) Bool)
(declare-fun Q1 (Registers) Bool)
(declare-fun Q2 (Registers) Bool)
(declare-fun Q3 (Registers) Bool)
(declare-fun Q4 (Registers) Bool)
(declare-fun Q5 (Registers) Bool)
(assert (forall ((reg1 Registers) (regNext1 Registers) )
   (=> (and (Q0 reg1) ) (Q1 regNext1))))
(assert (forall ((reg2 Registers) (regNext2 Registers) )
   (=> (and (Q1 reg2) (not (C0 reg2 regNext2))) (Q2 regNext2))))
(assert (forall ((reg3 Registers) (regNext3 Registers) )
   (=> (and (Q1 reg3) (and (C0 reg3 regNext3)(not (C1 reg3 regNext3)))) (Q2 regNext3))))
(assert (forall ((reg4 Registers) (regNext4 Registers) )
   (=> (and (Q1 reg4) (and (C0 reg4 regNext4)(C1 reg4 regNext4)(not (C2 reg4 regNext4))(not (C3 reg4 regNext4)))) (Q2 regNext4))))
(assert (forall ((reg5 Registers) (regNext5 Registers) )
   (=> (and (Q1 reg5) (and (C0 reg5 regNext5)(C1 reg5 regNext5)(not (C2 reg5 regNext5))(C3 reg5 regNext5)(not (C4 reg5 regNext5)))) (Q2 regNext5))))
(assert (forall ((reg6 Registers) (regNext6 Registers) )
   (=> (and (Q1 reg6) (and (C0 reg6 regNext6)(C1 reg6 regNext6)(not (C2 reg6 regNext6))(C3 reg6 regNext6)(C4 reg6 regNext6))) (Q3 regNext6))))
(assert (forall ((reg7 Registers) (regNext7 Registers) )
   (=> (and (Q1 reg7) (and (C0 reg7 regNext7)(C1 reg7 regNext7)(C2 reg7 regNext7)(not (C3 reg7 regNext7))(not (C4 reg7 regNext7)))) (Q2 regNext7))))
(assert (forall ((reg8 Registers) (regNext8 Registers) )
   (=> (and (Q1 reg8) (and (C0 reg8 regNext8)(C1 reg8 regNext8)(C2 reg8 regNext8)(not (C3 reg8 regNext8))(C4 reg8 regNext8))) (Q4 regNext8))))
(assert (forall ((reg9 Registers) (regNext9 Registers) )
   (=> (and (Q1 reg9) (and (C0 reg9 regNext9)(C1 reg9 regNext9)(C2 reg9 regNext9)(C3 reg9 regNext9)(not (C4 reg9 regNext9)))) (Q2 regNext9))))
(assert (forall ((reg10 Registers) (regNext10 Registers) )
   (=> (and (Q1 reg10) (and (C0 reg10 regNext10)(C1 reg10 regNext10)(C2 reg10 regNext10)(C3 reg10 regNext10)(C4 reg10 regNext10))) (Q5 regNext10))))
(assert (forall ((reg11 Registers) (regNext11 Registers) )
   (=> (and (Q2 reg11) ) (Q2 regNext11))))
(assert (forall ((reg12 Registers) (regNext12 Registers) )
   (=> (and (Q3 reg12) (not (C0 reg12 regNext12))) (Q3 regNext12))))
(assert (forall ((reg13 Registers) (regNext13 Registers) )
   (=> (and (Q3 reg13) (C0 reg13 regNext13)) (Q2 regNext13))))
(assert (forall ((reg14 Registers) (regNext14 Registers) )
   (=> (and (Q4 reg14) (not (C0 reg14 regNext14))) (Q2 regNext14))))
(assert (forall ((reg15 Registers) (regNext15 Registers) )
   (=> (and (Q4 reg15) (and (C0 reg15 regNext15)(not (C2 reg15 regNext15))(not (C3 reg15 regNext15)))) (Q2 regNext15))))
(assert (forall ((reg16 Registers) (regNext16 Registers) )
   (=> (and (Q4 reg16) (and (C0 reg16 regNext16)(not (C2 reg16 regNext16))(C3 reg16 regNext16)(not (C4 reg16 regNext16)))) (Q2 regNext16))))
(assert (forall ((reg17 Registers) (regNext17 Registers) )
   (=> (and (Q4 reg17) (and (C0 reg17 regNext17)(not (C2 reg17 regNext17))(C3 reg17 regNext17)(C4 reg17 regNext17))) (Q3 regNext17))))
(assert (forall ((reg18 Registers) (regNext18 Registers) )
   (=> (and (Q4 reg18) (and (C0 reg18 regNext18)(C2 reg18 regNext18)(not (C3 reg18 regNext18))(not (C4 reg18 regNext18)))) (Q2 regNext18))))
(assert (forall ((reg19 Registers) (regNext19 Registers) )
   (=> (and (Q4 reg19) (and (C0 reg19 regNext19)(C2 reg19 regNext19)(not (C3 reg19 regNext19))(C4 reg19 regNext19))) (Q4 regNext19))))
(assert (forall ((reg20 Registers) (regNext20 Registers) )
   (=> (and (Q4 reg20) (and (C0 reg20 regNext20)(C2 reg20 regNext20)(C3 reg20 regNext20)(not (C4 reg20 regNext20)))) (Q2 regNext20))))
(assert (forall ((reg21 Registers) (regNext21 Registers) )
   (=> (and (Q4 reg21) (and (C0 reg21 regNext21)(C2 reg21 regNext21)(C3 reg21 regNext21)(C4 reg21 regNext21))) (Q5 regNext21))))
(assert (forall ((reg22 Registers) (regNext22 Registers) )
   (=> (and (Q5 reg22) (not (C0 reg22 regNext22))) (Q3 regNext22))))
(assert (forall ((reg23 Registers) (regNext23 Registers) )
   (=> (and (Q5 reg23) (and (C0 reg23 regNext23)(not (C2 reg23 regNext23))(not (C3 reg23 regNext23))(not (C4 reg23 regNext23)))) (Q3 regNext23))))
(assert (forall ((reg24 Registers) (regNext24 Registers) )
   (=> (and (Q5 reg24) (and (C0 reg24 regNext24)(not (C2 reg24 regNext24))(not (C3 reg24 regNext24))(C4 reg24 regNext24))) (Q2 regNext24))))
(assert (forall ((reg25 Registers) (regNext25 Registers) )
   (=> (and (Q5 reg25) (and (C0 reg25 regNext25)(not (C2 reg25 regNext25))(C3 reg25 regNext25))) (Q3 regNext25))))
(assert (forall ((reg26 Registers) (regNext26 Registers) )
   (=> (and (Q5 reg26) (and (C0 reg26 regNext26)(C2 reg26 regNext26)(not (C3 reg26 regNext26))(not (C4 reg26 regNext26)))) (Q5 regNext26))))
(assert (forall ((reg27 Registers) (regNext27 Registers) )
   (=> (and (Q5 reg27) (and (C0 reg27 regNext27)(C2 reg27 regNext27)(not (C3 reg27 regNext27))(C4 reg27 regNext27))) (Q4 regNext27))))
(assert (forall ((reg28 Registers) (regNext28 Registers) )
   (=> (and (Q5 reg28) (and (C0 reg28 regNext28)(C2 reg28 regNext28)(C3 reg28 regNext28))) (Q5 regNext28))))
(assert (forall ((regF Registers)) (=> (Q3 regF) false)))
(assert (forall ((regF Registers)) (=> (Q5 regF) false)))
(assert (forall ((reg0 Registers)) (Q0 reg0)))
(check-sat)

